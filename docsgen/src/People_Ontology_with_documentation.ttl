@prefix : <http://michaeldebellis.com/people/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix swrl: <http://www.w3.org/2003/11/swrl#> .
@prefix swrla: <http://swrl.stanford.edu/ontologies/3.3/swrla.owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://michaeldebellis.com/people> a owl:Ontology ;
    dct:creator """Michael DeBellis
Orcid ID: 0000-0002-8824-9577""" ;
    dct:license <https://creativecommons.org/licenses/by/4.0/legalcode> ;
    skos:definition "A simple example ontology of People, Organizations, Places, and Animals to illustrate basic Semantic Web concepts from RDF, RDFS, OWL, SPARQL and SHACL" .

:Adam a :Man,
        owl:NamedIndividual ;
    rdfs:label "Adam" ;
    :has_Husband :Steve ;
    :has_age 23 ;
    owl:differentFrom :Steve .

:Address_Of_Marlow_Detective_Agency a :Address,
        owl:NamedIndividual ;
    rdfs:label "Address Of Marlow Detective Agency" ;
    :has_State :California ;
    :has_city :Los_Angeles ;
    :street "Hollywood Blvd.",
        "the Cahuenga Building" ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/The_Big_Sleep> .

:Allison a :Human,
        owl:NamedIndividual ;
    rdfs:label "Allison" ;
    :has_Friend :Michael ;
    :has_Gender :Female ;
    :has_Pet :Ash ;
    :has_age 28 .

:Alonzo_Church a :Man,
        owl:NamedIndividual ;
    rdfs:label "Alonzo Church" ;
    :has_Colleague :Alan_Turing .

:Apple_Inc a :Corporation,
        owl:NamedIndividual ;
    rdfs:label "Apple Inc" .

:Aviva_Chomsky a :Woman,
        owl:NamedIndividual ;
    rdfs:label "Aviva Chomsky" ;
    :birth_date "1957-04-20T00:00:00+00:00"^^xsd:dateTime ;
    :has_Father :Noam_Chomsky .

:Baha_ud-Din_Walad a :Man,
        owl:NamedIndividual ;
    rdfs:label "Baha ud-Din Walad" ;
    :has_Son :Rumi .

:Celeste_Albaret a :Person,
        owl:NamedIndividual ;
    rdfs:label "Céleste Albaret" ;
    :has_Social_Relationship :Marcel_Proust .

:Claude_Shannon a :Man,
        owl:NamedIndividual ;
    rdfs:label "Claude Shannon" ;
    :birth_date "1916-04-30T00:00:00+00:00"^^xsd:dateTime ;
    :employee_id "abc-de-fghi" ;
    :has_Colleague :Alan_Turing ;
    :has_employer :Bell_Labs ;
    :hired_on_date "1941-01-01T00:00:00"^^xsd:dateTime ;
    :phone "+1 (609) 555-6789" ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/Claude_Shannon> .

:Cow a owl:Class ;
    rdfs:label "Cow" ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:allValuesFrom :Grass ;
            owl:onProperty :eats ],
        :Mammal ;
    skos:definition "A Cow is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Cow’ is a kind of Mammal. A ‘Cow’ is a kind of only has ‘eats’ to Grass. A ‘Cow’ is a kind of Vertebrate. A ‘Cow’ is a kind of Animal. A ‘Cow’ is a kind of only has ‘eats’ to Plant. A ‘Cow’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Cow’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Dinsdale_Piranha a :Man,
        owl:NamedIndividual ;
    rdfs:label "Dinsdale Piranha" ;
    :has_Pet :Spiny_Norman ;
    rdfs:isDefinedBy <https://www.youtube.com/watch?v=8ZkWL-XvO0U> .

:Earth a :Planet,
        owl:NamedIndividual ;
    rdfs:label "Earth" ;
    :contains :Africa,
        :Antarctica,
        :Asia,
        :Australia,
        :Europe,
        :North_America,
        :South_America .

:Einsteins_Wife a owl:Class ;
    rdfs:label "Einstein's Wife" ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Woman [ a owl:Restriction ;
                        owl:hasValue :Albert_Einstein ;
                        owl:onProperty :has_Husband ] ) ] ;
    skos:definition "A Einstein's Wife is a kind of Agent. A Einstein's Wife is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Einstein's Wife’ is equivalent to both Woman and has ‘has husband’ value Albert Einstein. A ‘Einstein's Wife’ is a kind of both Woman and has ‘has husband’ value Albert Einstein. A ‘Einstein's Wife’ is a kind of has ‘has husband’ value Albert Einstein. A ‘Einstein's Wife’ is a kind of Woman. A ‘Einstein's Wife’ is a kind of has ‘has gender’ value Female. A ‘Einstein's Wife’ is a kind of both Adult and has ‘has gender’ value Female. A ‘Einstein's Wife’ is a kind of Adult. A ‘Einstein's Wife’ is a kind of either Girl or Woman. A ‘Einstein's Wife’ is a kind of Human. A ‘Einstein's Wife’ is a kind of Person. A ‘Einstein's Wife’ is a kind of Animal. A ‘Einstein's Wife’ is a kind of Vertebrate. A ‘Einstein's Wife’ is a kind of Mammal. A ‘Einstein's Wife’ is a kind of Agent. A ‘Einstein's Wife’ is a kind of has at least one ‘age’ value that is an xsd:integer ≥ 18. A ‘Einstein's Wife’ is a kind of both Person and has at least one ‘age’ value that is an xsd:integer ≥ 18. A ‘Einstein's Wife’ is a kind of Living Thing. A ‘Einstein's Wife’ is a kind of has at least one ‘eats’ to Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Emmanuelle_Charpentier a :Woman,
        owl:NamedIndividual ;
    rdfs:label "Emmanuelle Charpentier" ;
    :birth_date "1968-12-11T00:00:00+00:00"^^xsd:dateTime ;
    :employee_id "000-99-4321" ;
    :has_Colleague :Jennifer_Doudna ;
    :has_employer :Max_Planck_Unit_for_the_Science_of_Pathogens ;
    :hired_on_date "2002-01-01T00:00:00"^^xsd:dateTime ;
    :nobel_prize_winner true .

:Evelyn_Mase a :Woman,
        owl:NamedIndividual ;
    rdfs:label "Evelyn Mase" ;
    :has_Husband :Nelson_Mandela .

:Fluffy rdfs:label "Fluffy" .

:Gold_Fish a owl:Class ;
    rdfs:label "Gold Fish" ;
    rdfs:subClassOf :Fish ;
    skos:definition "A Gold Fish is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Gold Fish’ is a kind of Fish. A ‘Gold Fish’ is a kind of Vertebrate. A ‘Gold Fish’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Gold Fish’ is a kind of Animal. A ‘Gold Fish’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Gustav_Mahler a :Man,
        owl:NamedIndividual ;
    rdfs:label "Gustav Mahler" ;
    :has_Wife :Alma_Mahler ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/Gustav_Mahler> .

:Herbivore a owl:Class ;
    rdfs:label "Herbivore" ;
    rdfs:subClassOf :Animal ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Animal [ a owl:Restriction ;
                        owl:allValuesFrom :Plant ;
                        owl:onProperty :eats ] ) ] ;
    skos:definition "A Herbivore is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Herbivore’ is equivalent to both Animal and only has ‘eats’ to Plant. A ‘Herbivore’ is a kind of Animal. A ‘Herbivore’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Herbivore’ is a kind of both Animal and only has ‘eats’ to Plant. A ‘Herbivore’ is a kind of Living Thing. A ‘Herbivore’ is a kind of only has ‘eats’ to Plant. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Hermit a owl:Class ;
    rdfs:label "Hermit" ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Person [ a owl:Restriction ;
                        owl:onClass :Person ;
                        owl:onProperty :has_Social_Relationship ;
                        owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ] ) ] ;
    skos:definition "A Hermit is a kind of Agent. A Hermit is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Hermit’ is equivalent to both Person and has exactly 0 ‘has social relationship’ to Person. A ‘Hermit’ is a kind of both Person and has exactly 0 ‘has social relationship’ to Person. A ‘Hermit’ is a kind of has exactly 0 ‘has social relationship’ to Person. A ‘Hermit’ is a kind of Person. A ‘Hermit’ is a kind of Human. A ‘Hermit’ is a kind of Animal. A ‘Hermit’ is a kind of Agent. A ‘Hermit’ is a kind of Vertebrate. A ‘Hermit’ is a kind of Mammal. A ‘Hermit’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Hermit’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Howard_Aiken a :Person,
        owl:NamedIndividual ;
    rdfs:label "Howard Aiken" ;
    :has_Friend :Grace_Hopper .

:India a :Nation,
        owl:NamedIndividual ;
    rdfs:label "India" .

:Insect a owl:Class ;
    rdfs:label "Insect" ;
    rdfs:subClassOf :Animal ;
    owl:disjointWith :Vertebrate ;
    skos:definition "A Insect is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Insect’ is a kind of Animal. A ‘Insect’ is a kind of Living Thing. A ‘Insect’ is a kind of has at least one ‘eats’ to Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:James_Gatz a owl:NamedIndividual ;
    rdfs:label "James Gatz" ;
    :has_Father :HenryCGatz ;
    owl:sameAs :Jay_Gatsby .

:Janaki a :Person,
        owl:NamedIndividual ;
    rdfs:label "Janaki" ;
    :has_Husband :Srinivasa_Ramanujan .

:John a :Human,
        owl:NamedIndividual ;
    rdfs:label "John" ;
    :has_Pet :Eric_The_Fish .

:John_G_Kemeny a :Man,
        owl:NamedIndividual ;
    rdfs:label "John G. Kemeny" ;
    :has_Colleague :John_von_Neumann .

:Kings_College a :University,
        owl:NamedIndividual ;
    rdfs:label "Kings College" ;
    :has_city :London ;
    :is_Employer_Of :Alan_Turing .

:Klara_Dan_Von_Neumann a :Woman,
        owl:NamedIndividual ;
    rdfs:label "Klára Dán von Neumann" ;
    :has_Husband :John_von_Neumann .

:Kong_Li a :Man,
        owl:NamedIndividual ;
    rdfs:label "Kong Li" ;
    :has_Father :Confucius ;
    :wikidata <https://www.wikidata.org/wiki/Q7240164> .

:Massachusetts_Institute_of_Technology a :University,
        owl:NamedIndividual ;
    rdfs:label "Massachusetts Institute of Technology" ;
    :has_city :Cambridge ;
    :is_Employer_Of :Noam_Chomsky ;
    rdfs:isDefinedBy <https://web.mit.edu/> .

:Max_Planck_Institute_for_Infection_Biology rdfs:label "Max Planck Institute for Infection Biology" .

:Miss_Havisham a :Person,
        owl:NamedIndividual ;
    rdfs:label "Miss Havisham" ;
    :has_Gender :Female ;
    :has_age 65 ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/Miss_Havisham> .

:Muriel_Frances_Waley a :Woman,
        owl:NamedIndividual ;
    rdfs:label "Muriel Frances Waley" ;
    :has_Daughter :Rosalind_Franklin ;
    :has_Husband :Ellis_Arthur_Franklin .

:Organization_Unit a owl:Class ;
    rdfs:label "Organization Unit" ;
    rdfs:subClassOf :Orgonization_Component ;
    skos:definition "A Organization Unit is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Organization Unit’ is a kind of Orgonization Component. A ‘Organization Unit’ is a kind of Organization. A ‘Organization Unit’ is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Oskar_Morgenstern a :Man,
        owl:NamedIndividual ;
    rdfs:label "Oskar Morgenstern" ;
    :has_Colleague :John_von_Neumann .

:Parent a owl:Class ;
    rdfs:label "Parent" ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adult [ a owl:Restriction ;
                        owl:onProperty :has_Child ;
                        owl:someValuesFrom :Person ] ) ] ;
    skos:definition "A Parent is a kind of Agent. A Parent is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Parent’ is equivalent to both Adult and has at least one ‘has child’ to Person. A ‘Parent’ is a kind of both Adult and has at least one ‘has child’ to Person. A ‘Parent’ is a kind of has at least one ‘has child’ to Person. A ‘Parent’ is a kind of Adult. A ‘Parent’ is a kind of has at least one ‘age’ value that is an xsd:integer ≥ 18. A ‘Parent’ is a kind of both Person and has at least one ‘age’ value that is an xsd:integer ≥ 18. A ‘Parent’ is a kind of Person. A ‘Parent’ is a kind of Mammal. A ‘Parent’ is a kind of Agent. A ‘Parent’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Parent’ is a kind of Human. A ‘Parent’ is a kind of Animal. A ‘Parent’ is a kind of Living Thing. A ‘Parent’ is a kind of Vertebrate. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Rose a owl:Class ;
    rdfs:label "Rose" ;
    rdfs:subClassOf :Flower ;
    skos:definition "A Rose is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Rose’ is a kind of Flower. A ‘Rose’ is a kind of Plant. A ‘Rose’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Self_Employee a owl:Class ;
    rdfs:label "Self Employee" ;
    rdfs:subClassOf :Employee ;
    skos:definition "A Self Employee is a kind of Agent. A Self Employee is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Self Employee’ is a kind of Employee. A ‘Self Employee’ is a kind of Person. A ‘Self Employee’ is a kind of Agent. A ‘Self Employee’ is a kind of both Person and has at least one ‘has employer’ to Agent. A ‘Self Employee’ is a kind of Human. A ‘Self Employee’ is a kind of Mammal. A ‘Self Employee’ is a kind of Vertebrate. A ‘Self Employee’ is a kind of Animal. A ‘Self Employee’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Self Employee’ is a kind of Living Thing. A ‘Self Employee’ is a kind of has at least one ‘has employer’ to Agent. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Sherlock_Holmes a :Man,
        owl:NamedIndividual ;
    rdfs:label "Sherlock Holmes" ;
    :has_Address :Address_Of_Sherlock_Holmes ;
    :has_Colleague :Doctor_Watson ;
    :wikidata <https://www.wikidata.org/wiki/Q3481944> .

:Social_Person a owl:Class ;
    rdfs:label "Social Person" ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Person [ a owl:Restriction ;
                        owl:minQualifiedCardinality "5"^^xsd:nonNegativeInteger ;
                        owl:onClass :Person ;
                        owl:onProperty :has_Social_Relationship ] ) ] ;
    skos:definition "A Social Person is a kind of Agent. A Social Person is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Social Person’ is equivalent to both Person and has at least 5 ‘has social relationship’ to Person. A ‘Social Person’ is a kind of both Person and has at least 5 ‘has social relationship’ to Person. A ‘Social Person’ is a kind of has at least 5 ‘has social relationship’ to Person. A ‘Social Person’ is a kind of Person. A ‘Social Person’ is a kind of Agent. A ‘Social Person’ is a kind of Vertebrate. A ‘Social Person’ is a kind of Mammal. A ‘Social Person’ is a kind of Human. A ‘Social Person’ is a kind of Animal. A ‘Social Person’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Social Person’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Sun_Microsystems a :Corporation,
        owl:NamedIndividual ;
    rdfs:label "Sun Microsystems" .

:Terry_Lennox a :Person,
        owl:NamedIndividual ;
    rdfs:label "Terry Lennox" ;
    :has_Friend :Philip_Marlowe .

:The_Larch1 a :Larch,
        owl:NamedIndividual ;
    rdfs:label "The Larch1" .

:University_of_Manchester a :University,
        owl:NamedIndividual ;
    rdfs:label "University of Manchester" ;
    :has_city :Manchester ;
    :is_Employer_Of :Alan_Turing .

:Xerox_PARC a :Research_Institute,
        owl:NamedIndividual ;
    rdfs:label "Xerox PARC" .

:birth_date a owl:DatatypeProperty,
        owl:FunctionalProperty ;
    rdfs:label "birth date" ;
    rdfs:range xsd:dateTime ;
    skos:definition "The data property birth date records the birth date as an xsd:dateTime value. ⟦AUTOGEN:P1:2025-09-09⟧" .

:contains a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "contains" ;
    rdfs:subPropertyOf :contains_transitive ;
    owl:inverseOf :is_contained_in ;
    skos:definition "The property ‘contains’ is a relation between both Thing and Place and both Thing and Place. It is a sub-property of ‘contains transitive’. This means that if x contains y then x contains transitive y. It is the super-property for contains. This means that if a subject x contains y then x contains y. It has inverse ‘is contained in’, which means that if x contains y then y is contained in x. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:email a owl:DatatypeProperty ;
    rdfs:label "email" ;
    skos:definition "The data property email records the email as a literal value. ⟦AUTOGEN:P1:2025-09-09⟧" .

:employee_id a owl:DatatypeProperty ;
    rdfs:label "employee id" ;
    rdfs:domain :Employee ;
    skos:definition "The data property employee id records a Mammal's employee id as a literal value. The data property employee id records a Thing's employee id as a literal value. The data property employee id records a Person's employee id as a literal value. The data property employee id records a Agent's employee id as a literal value. The data property employee id records a Vertebrate's employee id as a literal value. The data property employee id records a Living Thing's employee id as a literal value. The data property employee id records a Human's employee id as a literal value. The data property employee id records a Employee's employee id as a literal value. The data property employee id records a Animal's employee id as a literal value. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Address a owl:ObjectProperty ;
    rdfs:label "has address" ;
    rdfs:domain :Agent ;
    rdfs:range :Address ;
    rdfs:subPropertyOf :has_Location ;
    owl:inverseOf :is_Address_For ;
    skos:definition "The property ‘has address’ is a relation between both Agent and Thing and all of Thing, Address, and Place. It is a sub-property of ‘has location’. This means that if x has address y then x has location y. It is the super-property for has address. This means that if a subject x has address y then x has address y. It has inverse ‘is address for’, which means that if x has address y then y is address for x. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Colleague a owl:IrreflexiveProperty,
        owl:ObjectProperty,
        owl:SymmetricProperty ;
    rdfs:label "has colleague" ;
    rdfs:subPropertyOf :has_Social_Relationship ;
    skos:definition "The property ‘has colleague’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is a sub-property of ‘has social relationship’. This means that if x has colleague y then x has social relationship y. It is the super-property for has colleague. This means that if a subject x has colleague y then x has colleague y. It is symmetric which means that if x relates to y, then y relates to x. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Daughter a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "has daughter" ;
    rdfs:range [ a owl:Class ;
            owl:unionOf ( :Girl :Woman ) ] ;
    rdfs:subPropertyOf :has_Child ;
    skos:definition "The property ‘has daughter’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, either Girl or Woman, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is a sub-property of ‘has child’, ‘has family relationship’, and ‘has social relationship’. This means that if x has daughter y then x has child y. This means that if x has daughter y then x has family relationship y. This means that if x has daughter y then x has social relationship y. It is the super-property for has daughter. This means that if a subject x has daughter y then x has daughter y. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Father a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "has father" ;
    :wikidata <https://www.wikidata.org/wiki/Q7565> ;
    rdfs:range :Man ;
    rdfs:subPropertyOf :has_Parent ;
    skos:definition "The property ‘has father’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of both Person and n95c2e269c11944e3a087c92d998ae83eb12, either Boy or Man, Mammal, Thing, both Adult and n95c2e269c11944e3a087c92d998ae83eb56, Person, Man, either Boy or Man, Agent, Adult, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, n95c2e269c11944e3a087c92d998ae83eb12, n95c2e269c11944e3a087c92d998ae83eb56, Human, n95c2e269c11944e3a087c92d998ae83eb20, and Animal. It is a sub-property of ‘has parent’, ‘has family relationship’, and ‘has social relationship’. This means that if x has father y then x has parent y. This means that if x has father y then x has family relationship y. This means that if x has father y then x has social relationship y. It is the super-property for has father. This means that if a subject x has father y then x has father y. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Friend a owl:IrreflexiveProperty,
        owl:ObjectProperty,
        owl:SymmetricProperty ;
    rdfs:label "has friend" ;
    rdfs:subPropertyOf :has_Social_Relationship ;
    skos:definition "The property ‘has friend’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is a sub-property of ‘has social relationship’. This means that if x has friend y then x has social relationship y. It is the super-property for has friend. This means that if a subject x has friend y then x has friend y. It is symmetric which means that if x relates to y, then y relates to x. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Member a owl:ObjectProperty ;
    rdfs:label "has member" ;
    rdfs:domain :Organization ;
    rdfs:range :Agent ;
    rdfs:subPropertyOf :has_Part ;
    owl:inverseOf :is_Member_Of ;
    skos:definition "The property ‘has member’ is a relation between all of Agent, Organization, and Thing and both Agent and Thing. It is a sub-property of ‘has part’. This means that if x has member y then x has part y. It is the super-property for has member. This means that if a subject x has member y then x has member y. It has inverse ‘is member of’, which means that if x has member y then y is member of x. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Mother a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "has mother" ;
    :wikidata <https://www.wikidata.org/wiki/Q7560> ;
    rdfs:range :Woman ;
    rdfs:subPropertyOf :has_Parent ;
    skos:definition "The property ‘has mother’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of both Person and n95c2e269c11944e3a087c92d998ae83eb12, Mammal, Thing, Woman, Person, either Girl or Woman, Agent, n95c2e269c11944e3a087c92d998ae83eb44, Adult, n95c2e269c11944e3a087c92d998ae83eb7, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, both Adult and n95c2e269c11944e3a087c92d998ae83eb74, n95c2e269c11944e3a087c92d998ae83eb12, Human, Animal, and n95c2e269c11944e3a087c92d998ae83eb74. It is a sub-property of ‘has parent’, ‘has family relationship’, and ‘has social relationship’. This means that if x has mother y then x has parent y. This means that if x has mother y then x has family relationship y. This means that if x has mother y then x has social relationship y. It is the super-property for has mother. This means that if a subject x has mother y then x has mother y. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Pet a owl:ObjectProperty ;
    rdfs:label "has pet" ;
    owl:inverseOf :is_Pet_Of ;
    skos:definition "The property ‘has pet’ is a relation between Thing and Thing. It is the super-property for has pet. This means that if a subject x has pet y then x has pet y. It has inverse ‘is pet of’, which means that if x has pet y then y is pet of x. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Son a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "has son" ;
    rdfs:range [ a owl:Class ;
            owl:unionOf ( :Boy :Man ) ] ;
    rdfs:subPropertyOf :has_Child ;
    skos:definition "The property ‘has son’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, either Boy or Man, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is a sub-property of ‘has child’, ‘has family relationship’, and ‘has social relationship’. This means that if x has son y then x has child y. This means that if x has son y then x has family relationship y. This means that if x has son y then x has social relationship y. It is the super-property for has son. This means that if a subject x has son y then x has son y. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_State a owl:ObjectProperty ;
    rdfs:label "has state" ;
    rdfs:range :State ;
    rdfs:subPropertyOf :has_Location ;
    skos:definition "The property ‘has state’ is a relation between Thing and all of State, Thing, and Place. It is a sub-property of ‘has location’. This means that if x has state y then x has location y. It is the super-property for has state. This means that if a subject x has state y then x has state y. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Subsidiary a owl:ObjectProperty ;
    rdfs:label "has subsidiary" ;
    rdfs:domain :Organization ;
    rdfs:range :Orgonization_Component ;
    rdfs:subPropertyOf :has_Part ;
    owl:inverseOf :is_subsidiary_of ;
    skos:definition "The property ‘has subsidiary’ is a relation between all of Agent, Organization, and Thing and all of Agent, Organization, Thing, and Orgonization Component. It is a sub-property of ‘has part’. This means that if x has subsidiary y then x has part y. It is the super-property for has subsidiary. This means that if a subject x has subsidiary y then x has subsidiary y. It has inverse ‘is subsidiary of’, which means that if x has subsidiary y then y is subsidiary of x. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Wife a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "has wife" ;
    rdfs:range :Woman ;
    rdfs:subPropertyOf :has_Spouse ;
    skos:definition "The property ‘has wife’ is a relation between all of both Person and n95c2e269c11944e3a087c92d998ae83eb12, Mammal, Thing, Person, Agent, Adult, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, n95c2e269c11944e3a087c92d998ae83eb12, Human, and Animal and all of both Person and n95c2e269c11944e3a087c92d998ae83eb12, Mammal, Thing, Woman, Person, either Girl or Woman, Agent, n95c2e269c11944e3a087c92d998ae83eb7, Adult, n95c2e269c11944e3a087c92d998ae83eb44, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, both Adult and n95c2e269c11944e3a087c92d998ae83eb74, n95c2e269c11944e3a087c92d998ae83eb12, Human, Animal, and n95c2e269c11944e3a087c92d998ae83eb74. It is a sub-property of ‘has spouse’, ‘has family relationship’, and ‘has social relationship’. This means that if x has wife y then x has spouse y. This means that if x has wife y then x has family relationship y. This means that if x has wife y then x has social relationship y. It is the super-property for has wife. This means that if a subject x has wife y then x has wife y. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:hired_on_date a owl:DatatypeProperty ;
    rdfs:label "hired on date" ;
    rdfs:domain :Employee ;
    rdfs:range xsd:dateTime ;
    skos:definition "The data property hired on date records a Mammal's hired on date as an xsd:dateTime value. The data property hired on date records a Thing's hired on date as an xsd:dateTime value. The data property hired on date records a Person's hired on date as an xsd:dateTime value. The data property hired on date records a Agent's hired on date as an xsd:dateTime value. The data property hired on date records a Vertebrate's hired on date as an xsd:dateTime value. The data property hired on date records a Living Thing's hired on date as an xsd:dateTime value. The data property hired on date records a Human's hired on date as an xsd:dateTime value. The data property hired on date records a Employee's hired on date as an xsd:dateTime value. The data property hired on date records a Animal's hired on date as an xsd:dateTime value. ⟦AUTOGEN:P1:2025-09-09⟧" .

:nobel_prize_winner a owl:DatatypeProperty,
        owl:FunctionalProperty ;
    rdfs:label "nobel prize winner" ;
    rdfs:domain :Person ;
    rdfs:range xsd:boolean ;
    skos:definition "The data property nobel prize winner records a Mammal's nobel prize winner as an xsd:boolean value. The data property nobel prize winner records a Thing's nobel prize winner as an xsd:boolean value. The data property nobel prize winner records a Person's nobel prize winner as an xsd:boolean value. The data property nobel prize winner records a Agent's nobel prize winner as an xsd:boolean value. The data property nobel prize winner records a Vertebrate's nobel prize winner as an xsd:boolean value. The data property nobel prize winner records a Living Thing's nobel prize winner as an xsd:boolean value. The data property nobel prize winner records a Human's nobel prize winner as an xsd:boolean value. The data property nobel prize winner records a Animal's nobel prize winner as an xsd:boolean value. ⟦AUTOGEN:P1:2025-09-09⟧" .

:number_of_social_relations a owl:DatatypeProperty,
        owl:FunctionalProperty ;
    rdfs:label "number of social relations" ;
    rdfs:domain :Person ;
    rdfs:range xsd:integer ;
    skos:definition "The data property number of social relations records a Mammal's number of social relations as an xsd:integer value. The data property number of social relations records a Thing's number of social relations as an xsd:integer value. The data property number of social relations records a Person's number of social relations as an xsd:integer value. The data property number of social relations records a Agent's number of social relations as an xsd:integer value. The data property number of social relations records a Vertebrate's number of social relations as an xsd:integer value. The data property number of social relations records a Living Thing's number of social relations as an xsd:integer value. The data property number of social relations records a Human's number of social relations as an xsd:integer value. The data property number of social relations records a Animal's number of social relations as an xsd:integer value. ⟦AUTOGEN:P1:2025-09-09⟧" .

:phone a owl:DatatypeProperty ;
    rdfs:label "phone" ;
    skos:definition "The data property phone records the phone as a literal value. ⟦AUTOGEN:P1:2025-09-09⟧" .

:street a owl:DatatypeProperty ;
    rdfs:label "street" ;
    rdfs:domain :Address ;
    skos:definition "The data property street records a Thing's street as a literal value. The data property street records a Address's street as a literal value. The data property street records a Place's street as a literal value. ⟦AUTOGEN:P1:2025-09-09⟧" .

:unit a owl:DatatypeProperty ;
    rdfs:label "unit" ;
    rdfs:domain :Address ;
    skos:altLabel "apartment",
        "suite" ;
    skos:definition "The data property unit records a Thing's unit as a literal value. The data property unit records a Address's unit as a literal value. The data property unit records a Place's unit as a literal value. ⟦AUTOGEN:P1:2025-09-09⟧" .

:wikidata a owl:AnnotationProperty ;
    rdfs:range xsd:anyURI .

:zip a owl:DatatypeProperty ;
    rdfs:label "zip" ;
    rdfs:domain :Address ;
    skos:definition "The data property zip records a Thing's zip as a literal value. The data property zip records a Address's zip as a literal value. The data property zip records a Place's zip as a literal value. ⟦AUTOGEN:P1:2025-09-09⟧" .

dct:abstract a owl:AnnotationProperty ;
    rdfs:label "abstract" ;
    skos:definition "A summary of the resource." .

dct:creator a owl:AnnotationProperty ;
    rdfs:label "creator" ;
    rdfs:comment "Recommended practice is to identify the creator with a URI. If this is not possible or feasible, a literal value that identifies the creator may be provided." ;
    skos:definition "An entity responsible for making the resource." .

dct:license a owl:AnnotationProperty .

dct:subject a owl:AnnotationProperty ;
    rdfs:label "subject" ;
    rdfs:comment "Recommended practice is to refer to the subject with a URI. If this is not possible or feasible, a literal value that identifies the subject may be provided. Both should preferably refer to a subject in a controlled vocabulary." ;
    skos:definition "A topic of the resource." .

dct:title a owl:AnnotationProperty ;
    rdfs:label "title" ;
    skos:definition "A name given to the resource." .

swrla:isRuleEnabled a owl:AnnotationProperty .

skos:altLabel a owl:AnnotationProperty ;
    rdfs:label "alternative label"@en ;
    rdfs:isDefinedBy <https://www.w3.org/2012/09/odrl/semantic/draft/doco/http___www.w3.org_2004_02_skos_core.html> ;
    rdfs:subPropertyOf rdfs:label ;
    skos:definition "An alternative lexical label for a resource." ;
    skos:example "Acronyms, abbreviations, spelling variants, and irregular plural/singular forms may be included among the alternative labels for a concept. Mis-spelled terms are normally included as hidden labels (see skos:hiddenLabel)." .

skos:changeNote a owl:AnnotationProperty ;
    rdfs:label "change note"@en ;
    rdfs:subPropertyOf skos:note ;
    skos:definition "A note about a modification to a concept." .

skos:definition a owl:AnnotationProperty ;
    rdfs:label "definition"@en ;
    rdfs:subPropertyOf skos:note ;
    skos:definition "A statement or formal explanation of the meaning of a concept." .

skos:example a owl:AnnotationProperty ;
    rdfs:label "example"@en ;
    rdfs:subPropertyOf skos:note ;
    skos:definition "An example of the use of a concept." .

skos:prefLabel a owl:AnnotationProperty ;
    rdfs:label "preferred label"@en ;
    rdfs:comment "skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties.	The range of skos:prefLabel is the class of RDF plain literals. A resource has no more than one value of skos:prefLabel per language tag." ;
    rdfs:isDefinedBy <https://www.w3.org/2012/09/odrl/semantic/draft/doco/http___www.w3.org_2004_02_skos_core.html> ;
    rdfs:subPropertyOf rdfs:label ;
    skos:definition "The preferred lexical label for a resource, in a given language." .

:Address_Of_Sherlock_Holmes a :Address,
        owl:NamedIndividual ;
    rdfs:label "Address Of Sherlock Holmes" ;
    :has_city :London ;
    :street "221B Baker Street" .

:Address_Of_Spade_Detective_Agency a :Address,
        owl:NamedIndividual ;
    rdfs:label "Address Of Spade Detective Agency" ;
    :has_State :California ;
    :has_city :San_Francisco ;
    :street "617 Bush Street" ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/The_Maltese_Falcon_(novel)> .

:Africa a :Continent,
        owl:NamedIndividual ;
    rdfs:label "Africa" .

:Alma_Mahler a :Woman,
        owl:NamedIndividual ;
    rdfs:label "Alma Mahler" ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/Alma_Mahler> .

:Antarctica a :Continent,
        owl:NamedIndividual ;
    rdfs:label "Antarctica" .

:Asia a :Continent,
        owl:NamedIndividual ;
    rdfs:label "Asia" .

:Australia a :Continent,
        owl:NamedIndividual ;
    rdfs:label "Australia" .

:Bell_Labs a :Corporation,
        owl:NamedIndividual ;
    rdfs:label "Bell Labs" ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/Bell_Labs> .

:Bird a owl:Class ;
    rdfs:label "Bird" ;
    rdfs:subClassOf :Vertebrate ;
    skos:definition "A Bird is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Bird’ is a kind of Vertebrate. A ‘Bird’ is a kind of Animal. A ‘Bird’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Bird’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Brazil a :Nation,
        owl:NamedIndividual ;
    rdfs:label "Brazil" .

:British_Columbia a :Province,
        owl:NamedIndividual ;
    rdfs:label "British Columbia" ;
    :contains :Vancouver .

:Canada a :Nation,
        owl:NamedIndividual ;
    rdfs:label "Canada" ;
    :contains :British_Columbia .

:Chicago a :City,
        owl:NamedIndividual ;
    rdfs:label "Chicago" .

:Confucius a :Man,
        owl:NamedIndividual ;
    rdfs:label "Confucius" ;
    :wikidata <https://www.wikidata.org/wiki/Q21189283> .

:Creme_Puff a :Cat,
        owl:NamedIndividual ;
    rdfs:label "Creme Puff" ;
    :wikidata <https://www.wikidata.org/wiki/Q2597104> .

:Division a owl:Class ;
    rdfs:label "Division" ;
    rdfs:subClassOf :Orgonization_Component ;
    skos:definition "A Division is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Division’ is a kind of Orgonization Component. A ‘Division’ is a kind of Organization. A ‘Division’ is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Doctor_Watson a :Person,
        owl:NamedIndividual ;
    rdfs:label "Doctor Watson" .

:Ellis_Arthur_Franklin a :Man,
        owl:NamedIndividual ;
    rdfs:label "Ellis Arthur Franklin" .

:Elsa_Einstein a :Woman,
        owl:NamedIndividual ;
    rdfs:label "Elsa Einstein" ;
    :birth_date "1876-01-18T00:00:00+00:00"^^xsd:dateTime ;
    :has_Husband :Albert_Einstein .

:Eric_The_Fish a :Halibut,
        owl:NamedIndividual ;
    rdfs:label "Eric the Fish" ;
    rdfs:isDefinedBy <https://www.youtube.com/watch?v=M5MnyRZLd8A> .

:Europe a :Continent,
        owl:NamedIndividual ;
    rdfs:label "Europe" ;
    :contains :Germany,
        :United_Kingdom .

:Flower a owl:Class ;
    rdfs:label "Flower" ;
    rdfs:subClassOf :Plant ;
    owl:disjointWith :Tree ;
    skos:definition "A Flower is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Flower’ is a kind of Plant. A ‘Flower’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Germany a :Nation,
        owl:NamedIndividual ;
    rdfs:label "Germany" ;
    :contains :Berlin .

:Grace_Hopper a :Woman,
        owl:NamedIndividual ;
    rdfs:label "Grace Hopper" ;
    :birth_date "1906-12-09T00:00:00+00:00"^^xsd:dateTime ;
    :has_employer :Harvard_University .

:Grass a owl:Class ;
    rdfs:label "Grass" ;
    rdfs:subClassOf :Plant ;
    skos:definition "A Grass is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Grass’ is a kind of Plant. A ‘Grass’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Haddock a owl:Class ;
    rdfs:label "Haddock" ;
    rdfs:subClassOf :Fish ;
    skos:definition "A Haddock is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Haddock’ is a kind of Fish. A ‘Haddock’ is a kind of Vertebrate. A ‘Haddock’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Haddock’ is a kind of Animal. A ‘Haddock’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Halibut a owl:Class ;
    rdfs:label "Halibut" ;
    rdfs:subClassOf :Fish ;
    skos:definition "A Halibut is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Halibut’ is a kind of Fish. A ‘Halibut’ is a kind of Vertebrate. A ‘Halibut’ is a kind of Animal. A ‘Halibut’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Halibut’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Harvard_University a :University,
        owl:NamedIndividual ;
    rdfs:label "Harvard University" ;
    :has_city :Cambridge .

:HenryCGatz a :Man,
        owl:NamedIndividual ;
    rdfs:label "Henry C. Gatz" ;
    :has_Pet :Fido ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/The_Great_Gatsby> .

:IBM a :Corporation,
        owl:NamedIndividual ;
    rdfs:label "IBM" ;
    rdfs:isDefinedBy <https://www.ibm.com/> .

:Illinois a :State,
        owl:NamedIndividual ;
    rdfs:label "Illinois" ;
    :contains :Chicago .

:Institute_For_Advanced_Study a :Research_Institute,
        owl:NamedIndividual ;
    rdfs:label "Institute For Advanced Study" ;
    :has_city :Princeton ;
    :is_Employer_Of :Albert_Einstein ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/Institute_for_Advanced_Study> .

:Jennifer_Doudna a :Woman,
        owl:NamedIndividual ;
    rdfs:label "Jennifer Doudna" ;
    :birth_date "1964-02-19T00:00:00+00:00"^^xsd:dateTime ;
    :employee_id "ucb-bio-1234" ;
    :has_employer :University_of_California_Berkeley ;
    :hired_on_date "2002-01-01T00:00:00"^^xsd:dateTime ;
    :nobel_prize_winner true .

:Jim_Doe a :Person,
        owl:NamedIndividual ;
    rdfs:label "Jim Doe" ;
    :has_Gender :Male ;
    :has_age 12 .

:Kurt_Godel a :Man,
        owl:NamedIndividual ;
    rdfs:label "Kurt Gödel" ;
    :has_Colleague :Albert_Einstein ;
    :has_Friend :Albert_Einstein .

:Larch a owl:Class ;
    rdfs:label "Larch" ;
    rdfs:subClassOf :Tree ;
    skos:definition "A Larch is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Larch’ is a kind of Tree. A ‘Larch’ is a kind of Plant. A ‘Larch’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Lise_Meitner a :Woman,
        owl:NamedIndividual ;
    rdfs:label "Lise Meitner" ;
    :birth_date "1878-11-07T00:00:00+00:00"^^xsd:dateTime ;
    :has_Colleague :Albert_Einstein .

:Marcel a :Haddock,
        owl:NamedIndividual ;
    rdfs:label "Marcel" ;
    rdfs:isDefinedBy <https://www.youtube.com/watch?v=M5MnyRZLd8A> .

:Marcel_Proust a :Man,
        owl:NamedIndividual ;
    rdfs:label "Marcel Proust" ;
    :birth_date "1871-07-10T00:00:00+00:00"^^xsd:dateTime ;
    :has_Pet :Marcel .

:Massachusetts a :State,
        owl:NamedIndividual ;
    rdfs:label "Massachusetts" ;
    :contains :Cambridge .

:Max_Planck_Unit_for_the_Science_of_Pathogens a :Research_Institute,
        owl:NamedIndividual ;
    rdfs:label "Max Planck Institute for Infection Biology" ;
    :has_city :Berlin .

:Michael a :Man,
        owl:NamedIndividual ;
    rdfs:label "Michael" ;
    :has_Colleague :Noam_Chomsky ;
    :has_Daughter :Oriana ;
    :has_Pet :Buddy .

:Michele_Besso a :Man,
        owl:NamedIndividual ;
    rdfs:label "Michele Besso" ;
    :birth_date "1873-05-25T00:00:00+00:00"^^xsd:dateTime ;
    :has_Friend :Albert_Einstein .

:Nelson_Mandela a :Man,
        owl:NamedIndividual ;
    rdfs:label "Nelson Mandela" .

:New_Jersey a :State,
        owl:NamedIndividual ;
    rdfs:label "New Jersey" ;
    :contains :Princeton .

:Non_Binary a :Gender,
        owl:NamedIndividual ;
    rdfs:label "Non Binary" .

:North_America a :Continent,
        owl:NamedIndividual ;
    rdfs:label "North America" ;
    :contains :Canada,
        :USA .

:Pet a owl:Class ;
    rdfs:label "Pet" ;
    rdfs:subClassOf :Living_Thing ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Animal [ a owl:Class ;
                        owl:complementOf :Human ] [ a owl:Restriction ;
                        owl:onProperty :is_Pet_Of ;
                        owl:someValuesFrom :Human ] ) ] ;
    skos:definition "A Pet is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Pet’ is equivalent to all of Animal, an anonymous class expression, and has at least one ‘is pet of’ to Human. A ‘Pet’ is a kind of Living Thing. A ‘Pet’ is a kind of all of Animal, an anonymous class expression, and has at least one ‘is pet of’ to Human. A ‘Pet’ is a kind of has at least one ‘is pet of’ to Human. A ‘Pet’ is a kind of an anonymous class expression. A ‘Pet’ is a kind of Animal. A ‘Pet’ is a kind of has at least one ‘eats’ to Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Philip_Marlowe a :Man,
        owl:NamedIndividual ;
    rdfs:label "Philip Marlowe" ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/The_Big_Sleep> .

:Planet a owl:Class ;
    rdfs:label "Planet" ;
    rdfs:subClassOf :Place ;
    skos:definition "A Planet is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Planet’ is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Province a owl:Class ;
    rdfs:label "Province" ;
    rdfs:subClassOf :Place ;
    skos:definition "A Province is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Province’ is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Region a owl:Class ;
    rdfs:label "Region" ;
    rdfs:subClassOf :Orgonization_Component ;
    skos:definition "A Region is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Region’ is a kind of Orgonization Component. A ‘Region’ is a kind of Organization. A ‘Region’ is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Reptile a owl:Class ;
    rdfs:label "Reptile" ;
    rdfs:subClassOf :Vertebrate ;
    skos:definition "A Reptile is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Reptile’ is a kind of Vertebrate. A ‘Reptile’ is a kind of Animal. A ‘Reptile’ is a kind of Living Thing. A ‘Reptile’ is a kind of has at least one ‘eats’ to Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Rex a :Dog,
        owl:NamedIndividual ;
    rdfs:label "Rex" .

:Rosalind_Franklin a :Woman,
        owl:NamedIndividual ;
    rdfs:label "Rosalind Franklin" ;
    :birth_date "1920-07-25T00:00:00+00:00"^^xsd:dateTime ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/Rosalind_Franklin> .

:Rumi a :Man,
        owl:NamedIndividual ;
    rdfs:label "Rumi" .

:Sales_Office a owl:Class ;
    rdfs:label "Sales Office" ;
    rdfs:subClassOf :Orgonization_Component ;
    skos:definition "A Sales Office is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Sales Office’ is a kind of Orgonization Component. A ‘Sales Office’ is a kind of Organization. A ‘Sales Office’ is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Sam_Spade a :Man,
        owl:NamedIndividual ;
    rdfs:label "Sam Spade" ;
    :has_Address :Address_Of_Spade_Detective_Agency ;
    :has_employer :Sam_Spade ;
    :phone "(415) 555-1212" ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/The_Maltese_Falcon_(novel)> .

:South_America a :Continent,
        owl:NamedIndividual ;
    rdfs:label "South America" ;
    :contains :Brazil .

:Spiny_Norman a :Hedgehog,
        owl:NamedIndividual ;
    rdfs:label "Spiny Norman" ;
    :wikidata <https://www.wikidata.org/wiki/Q7569306> ;
    rdfs:isDefinedBy <https://www.youtube.com/watch?v=C-FDW1shmqA> .

:Srinivasa_Ramanujan a :Man,
        owl:NamedIndividual ;
    rdfs:label "Srinivasa Ramanujan" .

:USA a :Nation,
        owl:NamedIndividual ;
    rdfs:label "USA" ;
    :contains :California,
        :Illinois,
        :Massachusetts,
        :New_Jersey ;
    :wikidata <https://www.wikidata.org/wiki/Q30> .

:United_Kingdom a :Nation,
        owl:NamedIndividual ;
    rdfs:label "United Kingdom" ;
    :contains :London,
        :Manchester .

:University_of_California_Berkeley a :University,
        owl:NamedIndividual ;
    rdfs:label "University of California Berkeley" ;
    :has_city :Berkeley ;
    rdfs:isDefinedBy <https://www.berkeley.edu/> .

:Vancouver a :City,
        owl:NamedIndividual ;
    rdfs:label "Vancouver" .

:Whiskers a :Cat,
        owl:NamedIndividual ;
    rdfs:label "Whiskers" ;
    :is_Pet_Of :Oriana .

:contains_transitive a owl:ObjectProperty,
        owl:TransitiveProperty ;
    rdfs:label "contains transitive" ;
    rdfs:domain :Place ;
    rdfs:range :Place ;
    owl:inverseOf :is_contained_in_transitive ;
    skos:definition "The property ‘contains transitive’ is a relation between both Thing and Place and both Thing and Place. It is the super-property for ‘contains’, and contains transitive. This means that if a subject x contains y then x contains transitive y. This means that if a subject x contains transitive y then x contains transitive y. It has inverse ‘is contained in transitive’, which means that if x contains transitive y then y is contained in transitive x. It is transitive which means that if x relates to y and y relates to z, then x relates to z. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Aunt a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "has aunt" ;
    rdfs:subPropertyOf :has_Family_Relationship ;
    owl:inverseOf :is_Aunt_Of ;
    skos:definition "The property ‘has aunt’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is a sub-property of ‘has family relationship’, and ‘has social relationship’. This means that if x has aunt y then x has family relationship y. This means that if x has aunt y then x has social relationship y. It is the super-property for has aunt. This means that if a subject x has aunt y then x has aunt y. It has inverse ‘is aunt of’, which means that if x has aunt y then y is aunt of x. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Brother a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "has brother" ;
    rdfs:range [ a owl:Class ;
            owl:unionOf ( :Boy :Man ) ] ;
    rdfs:subPropertyOf :has_Sibling ;
    skos:definition "The property ‘has brother’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, either Boy or Man, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is a sub-property of ‘has sibling’, ‘has family relationship’, and ‘has social relationship’. This means that if x has brother y then x has sibling y. This means that if x has brother y then x has family relationship y. This means that if x has brother y then x has social relationship y. It is the super-property for has brother. This means that if a subject x has brother y then x has brother y. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Husband a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "has husband" ;
    rdfs:range :Man ;
    rdfs:subPropertyOf :has_Spouse ;
    skos:definition "The property ‘has husband’ is a relation between all of both Person and n95c2e269c11944e3a087c92d998ae83eb12, Mammal, Thing, Person, Agent, Adult, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, n95c2e269c11944e3a087c92d998ae83eb12, Human, and Animal and all of both Person and n95c2e269c11944e3a087c92d998ae83eb12, Mammal, either Boy or Man, Thing, both Adult and n95c2e269c11944e3a087c92d998ae83eb56, Person, Man, Agent, either Boy or Man, Adult, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, n95c2e269c11944e3a087c92d998ae83eb12, Human, n95c2e269c11944e3a087c92d998ae83eb56, n95c2e269c11944e3a087c92d998ae83eb20, and Animal. It is a sub-property of ‘has spouse’, ‘has family relationship’, and ‘has social relationship’. This means that if x has husband y then x has spouse y. This means that if x has husband y then x has family relationship y. This means that if x has husband y then x has social relationship y. It is the super-property for has husband. This means that if a subject x has husband y then x has husband y. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Sister a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "has sister" ;
    rdfs:range [ a owl:Restriction ;
            owl:hasValue :Female ;
            owl:onProperty :has_Gender ] ;
    rdfs:subPropertyOf :has_Sibling ;
    skos:definition "The property ‘has sister’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, Agent, n95c2e269c11944e3a087c92d998ae83eb7, n95c2e269c11944e3a087c92d998ae83eb44, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, Animal, and n95c2e269c11944e3a087c92d998ae83eb74. It is a sub-property of ‘has sibling’, ‘has family relationship’, and ‘has social relationship’. This means that if x has sister y then x has sibling y. This means that if x has sister y then x has family relationship y. This means that if x has sister y then x has social relationship y. It is the super-property for has sister. This means that if a subject x has sister y then x has sister y. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Uncle a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "has uncle" ;
    rdfs:subPropertyOf :has_Family_Relationship ;
    owl:inverseOf :is_Uncle_Of ;
    skos:definition "The property ‘has uncle’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is a sub-property of ‘has family relationship’, and ‘has social relationship’. This means that if x has uncle y then x has family relationship y. This means that if x has uncle y then x has social relationship y. It is the super-property for has uncle. This means that if a subject x has uncle y then x has uncle y. It has inverse ‘is uncle of’, which means that if x has uncle y then y is uncle of x. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_city a owl:ObjectProperty ;
    rdfs:label "has city" ;
    rdfs:range :City ;
    rdfs:subPropertyOf :has_Location ;
    skos:definition "The property ‘has city’ is a relation between Thing and all of City, Thing, and Place. It is a sub-property of ‘has location’. This means that if x has city y then x has location y. It is the super-property for has city. This means that if a subject x has city y then x has city y. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_employer a owl:ObjectProperty ;
    rdfs:label "has employer" ;
    rdfs:domain :Employee ;
    rdfs:range :Agent ;
    owl:inverseOf :is_Employer_Of ;
    skos:definition "The property ‘has employer’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, n95c2e269c11944e3a087c92d998ae83eb36, Living Thing, both Person and n95c2e269c11944e3a087c92d998ae83eb36, n95c2e269c11944e3a087c92d998ae83eb18, Human, Employee, and Animal and both Agent and Thing. It is the super-property for has employer. This means that if a subject x has employer y then x has employer y. It has inverse ‘is employer of’, which means that if x has employer y then y is employer of x. ⟦AUTOGEN:P1:2025-09-09⟧" .

:is_Address_For a owl:ObjectProperty ;
    rdfs:label "is address for" ;
    skos:definition "The property ‘is address for’ is a relation between Thing and Thing. It is the super-property for is address for. This means that if a subject x is address for y then x is address for y. It has inverse ‘has address’, which means that if x is address for y then y has address x. ⟦AUTOGEN:P1:2025-09-09⟧" .

:is_Aunt_Of a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "is aunt of" ;
    rdfs:subPropertyOf :has_Family_Relationship ;
    skos:definition "The property ‘is aunt of’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is a sub-property of ‘has family relationship’, and ‘has social relationship’. This means that if x is aunt of y then x has family relationship y. This means that if x is aunt of y then x has social relationship y. It is the super-property for is aunt of. This means that if a subject x is aunt of y then x is aunt of y. It has inverse ‘has aunt’, which means that if x is aunt of y then y has aunt x. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:is_Employer_Of a owl:ObjectProperty ;
    rdfs:label "is employer of" ;
    skos:definition "The property ‘is employer of’ is a relation between Thing and Thing. It is the super-property for is employer of. This means that if a subject x is employer of y then x is employer of y. It has inverse ‘has employer’, which means that if x is employer of y then y has employer x. ⟦AUTOGEN:P1:2025-09-09⟧" .

:is_Member_Of a owl:ObjectProperty ;
    rdfs:label "is member of" ;
    rdfs:subPropertyOf :is_Part_Of ;
    skos:definition "The property ‘is member of’ is a relation between Thing and Thing. It is a sub-property of ‘is part of’. This means that if x is member of y then x is part of y. It is the super-property for is member of. This means that if a subject x is member of y then x is member of y. It has inverse ‘has member’, which means that if x is member of y then y has member x. ⟦AUTOGEN:P1:2025-09-09⟧" .

:is_Uncle_Of a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "is uncle of" ;
    rdfs:subPropertyOf :has_Family_Relationship ;
    skos:definition "The property ‘is uncle of’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is a sub-property of ‘has family relationship’, and ‘has social relationship’. This means that if x is uncle of y then x has family relationship y. This means that if x is uncle of y then x has social relationship y. It is the super-property for is uncle of. This means that if a subject x is uncle of y then x is uncle of y. It has inverse ‘has uncle’, which means that if x is uncle of y then y has uncle x. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:is_subsidiary_of a owl:ObjectProperty ;
    rdfs:label "is subsidiary of" ;
    rdfs:subPropertyOf :is_Part_Of ;
    skos:definition "The property ‘is subsidiary of’ is a relation between Thing and Thing. It is a sub-property of ‘is part of’. This means that if x is subsidiary of y then x is part of y. It is the super-property for is subsidiary of. This means that if a subject x is subsidiary of y then x is subsidiary of y. It has inverse ‘has subsidiary’, which means that if x is subsidiary of y then y has subsidiary x. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Ash a :Cat,
        owl:NamedIndividual ;
    rdfs:label "Ash" .

:Berkeley a :City,
        owl:NamedIndividual ;
    rdfs:label "Berkeley" .

:Berlin a :City,
        owl:NamedIndividual ;
    rdfs:label "Berlin" .

:Boy a owl:Class ;
    rdfs:label "Boy" ;
    rdfs:subClassOf :Child ;
    owl:disjointWith :Girl ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Child [ a owl:Restriction ;
                        owl:hasValue :Male ;
                        owl:onProperty :has_Gender ] ) ] ;
    skos:definition "A Boy is a kind of Agent. A Boy is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Boy’ is equivalent to both Child and has ‘has gender’ value Male. A ‘Boy’ is a kind of Child. A ‘Boy’ is a kind of both Child and has ‘has gender’ value Male. A ‘Boy’ is a kind of Person. A ‘Boy’ is a kind of either Boy or Man. A ‘Boy’ is a kind of Human. A ‘Boy’ is a kind of both Person and has at least one ‘age’ value that is an xsd:integer < 18. A ‘Boy’ is a kind of has ‘has gender’ value Male. A ‘Boy’ is a kind of Agent. A ‘Boy’ is a kind of Mammal. A ‘Boy’ is a kind of has at least one ‘age’ value that is an xsd:integer < 18. A ‘Boy’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Boy’ is a kind of Animal. A ‘Boy’ is a kind of Living Thing. A ‘Boy’ is a kind of Vertebrate. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Buddy a :Dog,
        owl:NamedIndividual ;
    rdfs:label "Buddy" .

:Emmy_Noether a :Woman,
        owl:NamedIndividual ;
    rdfs:label "Emmy Noether" ;
    :birth_date "1882-03-23T00:00:00+00:00"^^xsd:dateTime ;
    :has_Friend :Albert_Einstein .

:Fido a :Dog,
        owl:NamedIndividual ;
    rdfs:label "Fido" .

:Girl a owl:Class ;
    rdfs:label "Girl" ;
    rdfs:subClassOf :Child ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Child [ a owl:Restriction ;
                        owl:hasValue :Female ;
                        owl:onProperty :has_Gender ] ) ] ;
    skos:definition "A Girl is a kind of Agent. A Girl is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Girl’ is equivalent to both Child and has ‘has gender’ value Female. A ‘Girl’ is a kind of Child. A ‘Girl’ is a kind of both Child and has ‘has gender’ value Female. A ‘Girl’ is a kind of either Girl or Woman. A ‘Girl’ is a kind of Person. A ‘Girl’ is a kind of Mammal. A ‘Girl’ is a kind of Human. A ‘Girl’ is a kind of both Person and has at least one ‘age’ value that is an xsd:integer < 18. A ‘Girl’ is a kind of Agent. A ‘Girl’ is a kind of has ‘has gender’ value Female. A ‘Girl’ is a kind of Vertebrate. A ‘Girl’ is a kind of Animal. A ‘Girl’ is a kind of has at least one ‘age’ value that is an xsd:integer < 18. A ‘Girl’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Girl’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Hedgehog a owl:Class ;
    rdfs:label "Hedgehog" ;
    rdfs:subClassOf :Mammal ;
    skos:definition "A Hedgehog is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Hedgehog’ is a kind of Mammal. A ‘Hedgehog’ is a kind of Vertebrate. A ‘Hedgehog’ is a kind of Animal. A ‘Hedgehog’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Hedgehog’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Jay_Gatsby a :Man,
        owl:NamedIndividual ;
    rdfs:label "Jay Gatsby" ;
    :has_Friend :Nick_Carraway ;
    :has_Social_Relationship :Daisy_Buchanan,
        :Jordan_Baker,
        :Tom_Buchanan ;
    :wikidata <https://www.wikidata.org/wiki/Q7048121> ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/The_Great_Gatsby> ;
    owl:differentFrom :Jordan_Baker .

:John_Doe a :Person,
        owl:NamedIndividual ;
    rdfs:label "John Doe" ;
    :has_Brother :Tom_Doe ;
    :has_Daughter :Mary_Doe ;
    :has_Friend :John_Smith ;
    :has_Sister :Sarah_Doe ;
    :has_Son :Jim_Doe ;
    :has_Wife :Jane_Smith ;
    :has_age 34 .

:John_Smith a :Person,
        owl:NamedIndividual ;
    rdfs:label "John Smith" ;
    :has_age 43 .

:Jordan_Baker a :Person,
        owl:NamedIndividual ;
    rdfs:label "Jordan Baker" ;
    :has_Friend :Daisy_Buchanan .

:Los_Angeles a :City,
        owl:NamedIndividual ;
    rdfs:label "Los Angeles" .

:Manchester a :City,
        owl:NamedIndividual ;
    rdfs:label "Manchester" .

:Mary_Doe a :Person,
        owl:NamedIndividual ;
    rdfs:label "Mary Doe" ;
    :has_Mother :Jane_Smith ;
    :has_Sister :Susan_Doe ;
    :has_age 16 .

:Nick_Carraway a :Person,
        owl:NamedIndividual ;
    rdfs:label "Nick Carraway" ;
    :has_age 28 ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/The_Great_Gatsby> .

:Oriana a :Person,
        owl:NamedIndividual ;
    rdfs:label "Oriana" ;
    :has_Gender :Female ;
    :has_age 14 .

:Princeton a :City,
        owl:NamedIndividual ;
    rdfs:label "Princeton" .

:San_Francisco a :City,
        owl:NamedIndividual ;
    rdfs:label "San Francisco" .

:Sarah_Doe a :Person,
        owl:NamedIndividual ;
    rdfs:label "Sarah Doe" .

:Steve a :Man,
        owl:NamedIndividual ;
    rdfs:label "Steve" .

:Susan_Doe a :Person,
        owl:NamedIndividual ;
    rdfs:label "Susan Doe" .

:Tom_Doe a :Person,
        owl:NamedIndividual ;
    rdfs:label "Tom Doe" .

:Tree a owl:Class ;
    rdfs:label "Tree" ;
    rdfs:subClassOf :Plant ;
    skos:definition "A Tree is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Tree’ is a kind of Plant. A ‘Tree’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:address a swrl:Variable .

:c a swrl:Variable .

:city a swrl:Variable .

:has_Part a owl:ObjectProperty ;
    rdfs:label "has part" ;
    owl:inverseOf :is_Part_Of ;
    skos:definition "The property ‘has part’ is a relation between Thing and Thing. It is the super-property for ‘has subsidiary’, ‘has member’, and has part. This means that if a subject x has subsidiary y then x has part y. This means that if a subject x has member y then x has part y. This means that if a subject x has part y then x has part y. It has inverse ‘is part of’, which means that if x has part y then y is part of x. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Sibling a owl:IrreflexiveProperty,
        owl:ObjectProperty,
        owl:SymmetricProperty ;
    rdfs:label "has sibling" ;
    rdfs:subPropertyOf :has_Family_Relationship ;
    skos:definition "The property ‘has sibling’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is a sub-property of ‘has family relationship’, and ‘has social relationship’. This means that if x has sibling y then x has family relationship y. This means that if x has sibling y then x has social relationship y. It is the super-property for ‘has sister’, ‘has brother’, and has sibling. This means that if a subject x has sister y then x has sibling y. This means that if a subject x has brother y then x has sibling y. This means that if a subject x has sibling y then x has sibling y. It is symmetric which means that if x relates to y, then y relates to x. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Spouse a owl:IrreflexiveProperty,
        owl:ObjectProperty,
        owl:SymmetricProperty ;
    rdfs:label "has spouse" ;
    rdfs:domain :Adult ;
    rdfs:range :Adult ;
    rdfs:subPropertyOf :has_Family_Relationship ;
    skos:definition "The property ‘has spouse’ is a relation between all of both Person and n95c2e269c11944e3a087c92d998ae83eb12, Mammal, Thing, Person, Agent, Adult, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, n95c2e269c11944e3a087c92d998ae83eb12, Human, and Animal and all of both Person and n95c2e269c11944e3a087c92d998ae83eb12, Mammal, Thing, Person, Agent, Adult, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, n95c2e269c11944e3a087c92d998ae83eb12, Human, and Animal. It is a sub-property of ‘has family relationship’, and ‘has social relationship’. This means that if x has spouse y then x has family relationship y. This means that if x has spouse y then x has social relationship y. It is the super-property for ‘has wife’, ‘has husband’, and has spouse. This means that if a subject x has wife y then x has spouse y. This means that if a subject x has husband y then x has spouse y. This means that if a subject x has spouse y then x has spouse y. It is symmetric which means that if x relates to y, then y relates to x. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_age a owl:DatatypeProperty,
        owl:FunctionalProperty ;
    rdfs:label "age" ;
    rdfs:domain :Person ;
    rdfs:range xsd:integer ;
    skos:definition "The data property age records a Mammal's age as an xsd:integer value. The data property age records a Thing's age as an xsd:integer value. The data property age records a Person's age as an xsd:integer value. The data property age records a Agent's age as an xsd:integer value. The data property age records a Vertebrate's age as an xsd:integer value. The data property age records a Living Thing's age as an xsd:integer value. The data property age records a Human's age as an xsd:integer value. The data property age records a Animal's age as an xsd:integer value. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:example 12,
        32 ;
    skos:prefLabel "has age" .

:is_Pet_Of a owl:ObjectProperty ;
    rdfs:label "is pet of" ;
    rdfs:domain :Pet ;
    rdfs:range :Human ;
    skos:definition "The property ‘is pet of’ is a relation between all of n95c2e269c11944e3a087c92d998ae83eb64, Thing, Pet, all of Animal, n95c2e269c11944e3a087c92d998ae83eb64, and n95c2e269c11944e3a087c92d998ae83eb65, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, n95c2e269c11944e3a087c92d998ae83eb65, and Animal and all of Mammal, Thing, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is the super-property for is pet of. This means that if a subject x is pet of y then x is pet of y. It has inverse ‘has pet’, which means that if x is pet of y then y has pet x. ⟦AUTOGEN:P1:2025-09-09⟧" .

:is_contained_in a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "is contained in" ;
    rdfs:subPropertyOf :is_contained_in_transitive ;
    skos:definition "The property ‘is contained in’ is a relation between Thing and Thing. It is a sub-property of ‘is contained in transitive’. This means that if x is contained in y then x is contained in transitive y. It is the super-property for is contained in. This means that if a subject x is contained in y then x is contained in y. It has inverse ‘contains’, which means that if x is contained in y then y contains x. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:is_contained_in_transitive a owl:ObjectProperty,
        owl:TransitiveProperty ;
    rdfs:label "is contained in transitive" ;
    skos:definition "The property ‘is contained in transitive’ is a relation between Thing and Thing. It is the super-property for ‘is contained in’, and is contained in transitive. This means that if a subject x is contained in y then x is contained in transitive y. This means that if a subject x is contained in transitive y then x is contained in transitive y. It has inverse ‘contains transitive’, which means that if x is contained in transitive y then y contains transitive x. It is transitive which means that if x relates to y and y relates to z, then x relates to z. ⟦AUTOGEN:P1:2025-09-09⟧" .

:p a swrl:Variable .

:s a swrl:Variable .

<http://www.semanticweb.org/mdebe/ontologies/example#b> a swrl:Variable .

<http://www.semanticweb.org/mdebe/ontologies/example#c> a swrl:Variable .

<http://www.semanticweb.org/mdebe/ontologies/example#p> a swrl:Variable .

:California a :State,
        owl:NamedIndividual ;
    rdfs:label "California" ;
    :contains :Berkeley,
        :Los_Angeles,
        :San_Francisco .

:Cambridge a :City,
        owl:NamedIndividual ;
    rdfs:label "Cambridge" .

:Gender a owl:Class ;
    rdfs:label "Gender" ;
    owl:equivalentClass [ a owl:Class ;
            owl:oneOf ( :Female :Male :Non_Binary ) ] ;
    skos:definition "⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Gender’ is equivalent to either Female, Male, or Non Binary. A ‘Gender’ is a kind of either Female, Male, or Non Binary. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Jane_Smith a :Person,
        owl:NamedIndividual ;
    rdfs:label "Jane Smith" .

:London a :City,
        owl:NamedIndividual ;
    rdfs:label "London" .

:Noam_Chomsky a :Person,
        owl:NamedIndividual ;
    rdfs:label "Noam Chomsky" ;
    :birth_date "1928-12-07T00:00:00+00:00"^^xsd:dateTime ;
    :email "chomsky@mit.edu" ;
    :employee_id "MIT-1953" ;
    :has_age 96 ;
    :hired_on_date "1955-01-01T00:00:00"^^xsd:dateTime ;
    :wikidata <https://www.wikidata.org/wiki/Q112150900> ;
    rdfs:isDefinedBy <https://chomsky.info/> .

:Tom_Buchanan a owl:NamedIndividual ;
    rdfs:label "Tom Buchanan" ;
    :has_Wife :Daisy_Buchanan ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/The_Great_Gatsby> .

:eats a owl:ObjectProperty ;
    rdfs:label "eats" ;
    rdfs:domain :Animal ;
    rdfs:range :Living_Thing ;
    skos:definition "The property ‘eats’ is a relation between all of Living Thing, Animal, n95c2e269c11944e3a087c92d998ae83eb18, and Thing and both Living Thing and Thing. It is the super-property for eats. This means that if a subject x eats y then x eats y. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Location a owl:ObjectProperty ;
    rdfs:label "has location" ;
    rdfs:range :Place ;
    skos:definition "The property ‘has location’ is a relation between Thing and both Thing and Place. It is the super-property for ‘has address’, ‘has state’, ‘has city’, and has location. This means that if a subject x has address y then x has location y. This means that if a subject x has state y then x has location y. This means that if a subject x has city y then x has location y. This means that if a subject x has location y then x has location y. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Parent a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "has parent" ;
    rdfs:subPropertyOf :has_Family_Relationship ;
    skos:definition "The property ‘has parent’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is a sub-property of ‘has family relationship’, and ‘has social relationship’. This means that if x has parent y then x has family relationship y. This means that if x has parent y then x has social relationship y. It is the super-property for ‘has mother’, ‘has father’, and has parent. This means that if a subject x has mother y then x has parent y. This means that if a subject x has father y then x has parent y. This means that if a subject x has parent y then x has parent y. It has inverse ‘has child’, which means that if x has parent y then y has child x. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:is_Part_Of a owl:ObjectProperty ;
    rdfs:label "is part of" ;
    skos:definition "The property ‘is part of’ is a relation between Thing and Thing. It is the super-property for ‘is member of’, ‘is subsidiary of’, and is part of. This means that if a subject x is member of y then x is part of y. This means that if a subject x is subsidiary of y then x is part of y. This means that if a subject x is part of y then x is part of y. It has inverse ‘has part’, which means that if x is part of y then y has part x. ⟦AUTOGEN:P1:2025-09-09⟧" .

skos:note a owl:AnnotationProperty ;
    rdfs:label "note"@en ;
    rdfs:isDefinedBy <https://www.w3.org/2012/09/odrl/semantic/draft/doco/http___www.w3.org_2004_02_skos_core.html> ;
    skos:definition "A general note, for any purpose."@en .

:Alan_Turing a :Man,
        owl:NamedIndividual ;
    rdfs:label "Alan Turing" ;
    :birth_date "1912-06-23T00:00:00+00:00"^^xsd:dateTime ;
    :employee_id "999-99-9999" ;
    :has_Colleague :John_von_Neumann .

:Cat a owl:Class ;
    rdfs:label "Cat" ;
    rdfs:subClassOf :Mammal ;
    skos:definition "A Cat is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Cat’ is a kind of Mammal. A ‘Cat’ is a kind of Vertebrate. A ‘Cat’ is a kind of Animal. A ‘Cat’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Cat’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Child a owl:Class ;
    rdfs:label "Child" ;
    rdfs:subClassOf :Person ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Person [ a owl:Restriction ;
                        owl:onProperty :has_age ;
                        owl:someValuesFrom [ a rdfs:Datatype ;
                                owl:onDatatype xsd:integer ;
                                owl:withRestrictions ( [ xsd:maxExclusive 18 ] ) ] ] ) ] ;
    skos:definition "A Child is a kind of Agent. A Child is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Child’ is equivalent to both Person and has at least one ‘age’ value that is an xsd:integer < 18. A ‘Child’ is a kind of Person. A ‘Child’ is a kind of Human. A ‘Child’ is a kind of both Person and has at least one ‘age’ value that is an xsd:integer < 18. A ‘Child’ is a kind of Agent. A ‘Child’ is a kind of Vertebrate. A ‘Child’ is a kind of Mammal. A ‘Child’ is a kind of has at least one ‘age’ value that is an xsd:integer < 18. A ‘Child’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Child’ is a kind of Animal. A ‘Child’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Dog a owl:Class ;
    rdfs:label "Dog" ;
    rdfs:subClassOf :Mammal ;
    skos:definition "A Dog is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Dog’ is a kind of Mammal. A ‘Dog’ is a kind of Vertebrate. A ‘Dog’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Dog’ is a kind of Living Thing. A ‘Dog’ is a kind of Animal. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Employee a owl:Class ;
    rdfs:label "Employee" ;
    rdfs:subClassOf :Person ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Person [ a owl:Restriction ;
                        owl:onProperty :has_employer ;
                        owl:someValuesFrom :Agent ] ) ] ;
    skos:definition "A Employee is a kind of Agent. A Employee is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Employee’ is equivalent to both Person and has at least one ‘has employer’ to Agent. A ‘Employee’ is a kind of Person. A ‘Employee’ is a kind of Agent. A ‘Employee’ is a kind of both Person and has at least one ‘has employer’ to Agent. A ‘Employee’ is a kind of Human. A ‘Employee’ is a kind of has at least one ‘has employer’ to Agent. A ‘Employee’ is a kind of Vertebrate. A ‘Employee’ is a kind of Mammal. A ‘Employee’ is a kind of Living Thing. A ‘Employee’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Employee’ is a kind of Animal. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Fish a owl:Class ;
    rdfs:label "Fish" ;
    rdfs:subClassOf :Vertebrate ;
    skos:definition "A Fish is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Fish’ is a kind of Vertebrate. A ‘Fish’ is a kind of Animal. A ‘Fish’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Fish’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Male a owl:NamedIndividual ;
    rdfs:label "Male" .

:Research_Institute a owl:Class ;
    rdfs:label "Research Institute" ;
    rdfs:subClassOf :Organization ;
    skos:definition "A Research Institute is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Research Institute’ is a kind of Organization. A ‘Research Institute’ is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Adult a owl:Class ;
    rdfs:label "Adult" ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Person [ a owl:Restriction ;
                        owl:onProperty :has_age ;
                        owl:someValuesFrom [ a rdfs:Datatype ;
                                owl:onDatatype xsd:integer ;
                                owl:withRestrictions ( [ xsd:minInclusive 18 ] ) ] ] ) ] ;
    skos:definition "A Adult is a kind of Agent. A Adult is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Adult’ is equivalent to both Person and has at least one ‘age’ value that is an xsd:integer ≥ 18. A ‘Adult’ is a kind of both Person and has at least one ‘age’ value that is an xsd:integer ≥ 18. A ‘Adult’ is a kind of Person. A ‘Adult’ is a kind of has at least one ‘age’ value that is an xsd:integer ≥ 18. A ‘Adult’ is a kind of Human. A ‘Adult’ is a kind of Animal. A ‘Adult’ is a kind of Agent. A ‘Adult’ is a kind of Vertebrate. A ‘Adult’ is a kind of Mammal. A ‘Adult’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Adult’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Corporation a owl:Class ;
    rdfs:label "Corporation" ;
    rdfs:subClassOf :Organization ;
    skos:definition "A Corporation is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Corporation’ is a kind of Organization. A ‘Corporation’ is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Daisy_Buchanan a :Person,
        owl:NamedIndividual ;
    rdfs:label "Daisy Buchanan" ;
    :has_Friend :John_Doe ;
    :has_Husband :Tom_Buchanan ;
    :has_age 32 ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/The_Great_Gatsby> .

:John_von_Neumann a :Person,
        owl:NamedIndividual ;
    rdfs:label "John von Neumann" ;
    :birth_date "1903-12-28T00:00:00+00:00"^^xsd:dateTime ;
    :employee_id "999-00-1234",
        "999-00-4321" ;
    :has_employer :IBM,
        :Institute_For_Advanced_Study ;
    :hired_on_date "1954-01-01T00:00:00"^^xsd:dateTime .

:Living_Thing a owl:Class ;
    rdfs:label "Living Thing" ;
    skos:definition "⟦AUTOGEN:P1:2025-09-09⟧" .

:Orgonization_Component a owl:Class ;
    rdfs:label "Orgonization Component" ;
    rdfs:subClassOf :Organization ;
    skos:definition "A Orgonization Component is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Orgonization Component’ is a kind of Organization. A ‘Orgonization Component’ is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Plant a owl:Class ;
    rdfs:label "Plant" ;
    rdfs:subClassOf :Living_Thing ;
    skos:definition "A Plant is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Plant’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:State a owl:Class ;
    rdfs:label "State" ;
    rdfs:subClassOf :Place ;
    skos:definition "A State is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘State’ is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Vertebrate a owl:Class ;
    rdfs:label "Vertebrate" ;
    rdfs:subClassOf :Animal ;
    skos:definition "A Vertebrate is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Vertebrate’ is a kind of Animal. A ‘Vertebrate’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Vertebrate’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Child a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "has child" ;
    rdfs:subPropertyOf :has_Family_Relationship ;
    owl:inverseOf :has_Parent ;
    skos:definition "The property ‘has child’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is a sub-property of ‘has family relationship’, and ‘has social relationship’. This means that if x has child y then x has family relationship y. This means that if x has child y then x has social relationship y. It is the super-property for ‘has son’, ‘has daughter’, and has child. This means that if a subject x has son y then x has child y. This means that if a subject x has daughter y then x has child y. This means that if a subject x has child y then x has child y. It has inverse ‘has parent’, which means that if x has child y then y has parent x. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Gender a owl:FunctionalProperty,
        owl:ObjectProperty ;
    rdfs:label "has gender" ;
    rdfs:domain :Animal ;
    rdfs:range :Gender ;
    skos:definition "The property ‘has gender’ is a relation between all of Living Thing, Animal, n95c2e269c11944e3a087c92d998ae83eb18, and Thing and all of Gender, Thing, and n95c2e269c11944e3a087c92d998ae83eb39. It is the super-property for has gender. This means that if a subject x has gender y then x has gender y. It is functional which means that each subject can relate to at most one object by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Social_Relationship a owl:IrreflexiveProperty,
        owl:ObjectProperty,
        owl:SymmetricProperty ;
    rdfs:label "has social relationship" ;
    rdfs:domain :Person ;
    rdfs:range :Person ;
    skos:definition "The property ‘has social relationship’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is the super-property for ‘has family relationship’, ‘has friend’, ‘has colleague’, ‘has aunt’, ‘has child’, ‘has spouse’, ‘has sibling’, ‘has parent’, ‘is uncle of’, has social relationship, ‘has uncle’, ‘is aunt of’, ‘has wife’, ‘has daughter’, ‘has sister’, ‘has husband’, ‘has mother’, ‘has father’, ‘has son’, and ‘has brother’. This means that if a subject x has family relationship y then x has social relationship y. This means that if a subject x has friend y then x has social relationship y. This means that if a subject x has colleague y then x has social relationship y. This means that if a subject x has aunt y then x has social relationship y. This means that if a subject x has child y then x has social relationship y. This means that if a subject x has spouse y then x has social relationship y. This means that if a subject x has sibling y then x has social relationship y. This means that if a subject x has parent y then x has social relationship y. This means that if a subject x is uncle of y then x has social relationship y. This means that if a subject x has social relationship y then x has social relationship y. This means that if a subject x has uncle y then x has social relationship y. This means that if a subject x is aunt of y then x has social relationship y. This means that if a subject x has wife y then x has social relationship y. This means that if a subject x has daughter y then x has social relationship y. This means that if a subject x has sister y then x has social relationship y. This means that if a subject x has husband y then x has social relationship y. This means that if a subject x has mother y then x has social relationship y. This means that if a subject x has father y then x has social relationship y. This means that if a subject x has son y then x has social relationship y. This means that if a subject x has brother y then x has social relationship y. It is symmetric which means that if x relates to y, then y relates to x. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Agent a owl:Class ;
    rdfs:label "Agent" ;
    skos:definition "⟦AUTOGEN:P1:2025-09-09⟧" .

:Mammal a owl:Class ;
    rdfs:label "Mammal" ;
    rdfs:subClassOf :Vertebrate ;
    skos:definition "A Mammal is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Mammal’ is a kind of Vertebrate. A ‘Mammal’ is a kind of Animal. A ‘Mammal’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Mammal’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Nation a owl:Class ;
    rdfs:label "Nation" ;
    rdfs:subClassOf :Place ;
    skos:definition "A Nation is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Nation’ is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Organization a owl:Class ;
    rdfs:label "Organization" ;
    :wikidata <https://www.wikidata.org/wiki/Q43229> ;
    rdfs:subClassOf :Agent ;
    skos:definition "A Organization is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Organization’ is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" .

:University a owl:Class ;
    rdfs:label "University" ;
    rdfs:subClassOf :Organization ;
    skos:definition "A University is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘University’ is a kind of Organization. A ‘University’ is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Address a owl:Class ;
    rdfs:label "Address" ;
    rdfs:subClassOf :Place ;
    skos:definition "A Address is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Address’ is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Animal a owl:Class ;
    rdfs:label "Animal" ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :eats ;
            owl:someValuesFrom :Living_Thing ],
        :Living_Thing ;
    owl:disjointWith :Plant ;
    skos:definition "A Animal is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Animal’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Animal’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Continent a owl:Class ;
    rdfs:label "Continent" ;
    rdfs:subClassOf :Place ;
    skos:definition "A Continent is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Continent’ is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Female a :Gender,
        owl:NamedIndividual ;
    rdfs:label "Female" .

:Human a owl:Class ;
    rdfs:label "Human" ;
    rdfs:subClassOf :Mammal ;
    skos:definition "A Human is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Human’ is a kind of Mammal. A ‘Human’ is a kind of Vertebrate. A ‘Human’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Human’ is a kind of Living Thing. A ‘Human’ is a kind of Animal. ⟦AUTOGEN:P1:2025-09-09⟧" .

:has_Family_Relationship a owl:IrreflexiveProperty,
        owl:ObjectProperty ;
    rdfs:label "has family relationship" ;
    rdfs:subPropertyOf :has_Social_Relationship ;
    skos:definition "The property ‘has family relationship’ is a relation between all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal and all of Mammal, Thing, Person, Agent, Vertebrate, Living Thing, n95c2e269c11944e3a087c92d998ae83eb18, Human, and Animal. It is a sub-property of ‘has social relationship’. This means that if x has family relationship y then x has social relationship y. It is the super-property for ‘has parent’, ‘has uncle’, ‘has aunt’, ‘is aunt of’, ‘has child’, ‘has spouse’, ‘is uncle of’, ‘has sibling’, ‘has daughter’, ‘has wife’, ‘has father’, ‘has son’, has family relationship, ‘has brother’, ‘has sister’, ‘has husband’, and ‘has mother’. This means that if a subject x has parent y then x has family relationship y. This means that if a subject x has uncle y then x has family relationship y. This means that if a subject x has aunt y then x has family relationship y. This means that if a subject x is aunt of y then x has family relationship y. This means that if a subject x has child y then x has family relationship y. This means that if a subject x has spouse y then x has family relationship y. This means that if a subject x is uncle of y then x has family relationship y. This means that if a subject x has sibling y then x has family relationship y. This means that if a subject x has daughter y then x has family relationship y. This means that if a subject x has wife y then x has family relationship y. This means that if a subject x has father y then x has family relationship y. This means that if a subject x has son y then x has family relationship y. This means that if a subject x has family relationship y then x has family relationship y. This means that if a subject x has brother y then x has family relationship y. This means that if a subject x has sister y then x has family relationship y. This means that if a subject x has husband y then x has family relationship y. This means that if a subject x has mother y then x has family relationship y. It is irreflexive which means that no individual relates to itself by this property. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Albert_Einstein a :Man,
        owl:NamedIndividual ;
    rdfs:label "Albert Einstein" ;
    :birth_date "1879-03-14T00:00:00+00:00"^^xsd:dateTime ;
    :employee_id "999-99-1234" ;
    :has_Colleague :Emmy_Noether,
        :John_von_Neumann ;
    :hired_on_date "1933-10-01T00:00:00"^^xsd:dateTime ;
    :nobel_prize_winner true ;
    :phone "+1 (609) 555-1234" ;
    :wikidata <https://www.wikidata.org/wiki/Q937> ;
    rdfs:isDefinedBy <https://en.wikipedia.org/wiki/Albert_Einstein> .

:Place a owl:Class ;
    rdfs:label "Place" ;
    skos:definition "⟦AUTOGEN:P1:2025-09-09⟧" .

:City a owl:Class ;
    rdfs:label "City" ;
    rdfs:subClassOf :Place ;
    skos:definition "A City is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘City’ is a kind of Place. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Woman a owl:Class ;
    rdfs:label "Woman" ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adult [ a owl:Restriction ;
                        owl:hasValue :Female ;
                        owl:onProperty :has_Gender ] ) ] ;
    skos:definition "A Woman is a kind of Living Thing. A Woman is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Woman’ is equivalent to both Adult and has ‘has gender’ value Female. A ‘Woman’ is a kind of both Adult and has ‘has gender’ value Female. A ‘Woman’ is a kind of either Girl or Woman. A ‘Woman’ is a kind of Adult. A ‘Woman’ is a kind of has ‘has gender’ value Female. A ‘Woman’ is a kind of has at least one ‘age’ value that is an xsd:integer ≥ 18. A ‘Woman’ is a kind of both Person and has at least one ‘age’ value that is an xsd:integer ≥ 18. A ‘Woman’ is a kind of Person. A ‘Woman’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Woman’ is a kind of Human. A ‘Woman’ is a kind of Animal. A ‘Woman’ is a kind of Living Thing. A ‘Woman’ is a kind of Vertebrate. A ‘Woman’ is a kind of Mammal. A ‘Woman’ is a kind of Agent. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Man a owl:Class ;
    rdfs:label "Man" ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :Adult [ a owl:Restriction ;
                        owl:hasValue :Male ;
                        owl:onProperty :has_Gender ] ) ] ;
    skos:definition "A Man is a kind of Agent. A Man is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Man’ is equivalent to both Adult and has ‘has gender’ value Male. A ‘Man’ is a kind of either Boy or Man. A ‘Man’ is a kind of both Adult and has ‘has gender’ value Male. A ‘Man’ is a kind of has ‘has gender’ value Male. A ‘Man’ is a kind of Adult. A ‘Man’ is a kind of Person. A ‘Man’ is a kind of has at least one ‘age’ value that is an xsd:integer ≥ 18. A ‘Man’ is a kind of both Person and has at least one ‘age’ value that is an xsd:integer ≥ 18. A ‘Man’ is a kind of Human. A ‘Man’ is a kind of Vertebrate. A ‘Man’ is a kind of Mammal. A ‘Man’ is a kind of Agent. A ‘Man’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Man’ is a kind of Animal. A ‘Man’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

:Person a owl:Class ;
    rdfs:label "Person" ;
    rdfs:subClassOf :Agent,
        :Human ;
    skos:definition "A Person is a kind of Agent. A Person is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" ;
    skos:scopeNote "A ‘Person’ is a kind of Human. A ‘Person’ is a kind of Agent. A ‘Person’ is a kind of Mammal. A ‘Person’ is a kind of Vertebrate. A ‘Person’ is a kind of Animal. A ‘Person’ is a kind of has at least one ‘eats’ to Living Thing. A ‘Person’ is a kind of Living Thing. ⟦AUTOGEN:P1:2025-09-09⟧" .

[] a owl:AllDifferent ;
    owl:distinctMembers ( :Ash :Creme_Puff :Whiskers ) .

[] a owl:AllDifferent ;
    owl:distinctMembers ( :Buddy :Fido :Rex ) .

[] a owl:AllDifferent ;
    owl:distinctMembers ( :Daisy_Buchanan :Jane_Smith :John_Doe :John_Smith :Mary_Doe :Sarah_Doe :Susan_Doe :Tom_Doe ) .

[] a owl:AllDifferent ;
    owl:distinctMembers ( :Daisy_Buchanan :Jay_Gatsby :Nick_Carraway :Tom_Buchanan ) .

[] a swrl:Imp ;
    rdfs:label "Uncle_Rule" ;
    swrla:isRuleEnabled true ;
    rdfs:comment "" ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 <http://www.semanticweb.org/mdebe/ontologies/example#p> ;
                    swrl:argument2 <http://www.semanticweb.org/mdebe/ontologies/example#b> ;
                    swrl:propertyPredicate :has_Brother ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 <http://www.semanticweb.org/mdebe/ontologies/example#p> ;
                            swrl:argument2 <http://www.semanticweb.org/mdebe/ontologies/example#c> ;
                            swrl:propertyPredicate :has_Child ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 <http://www.semanticweb.org/mdebe/ontologies/example#c> ;
                    swrl:argument2 <http://www.semanticweb.org/mdebe/ontologies/example#b> ;
                    swrl:propertyPredicate :has_Uncle ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    rdfs:label "Aunt_Rule" ;
    swrla:isRuleEnabled true ;
    rdfs:comment "" ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :p ;
                    swrl:argument2 :c ;
                    swrl:propertyPredicate :has_Child ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:IndividualPropertyAtom ;
                            swrl:argument1 :p ;
                            swrl:argument2 :s ;
                            swrl:propertyPredicate :has_Sister ] ;
                    rdf:rest () ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :c ;
                    swrl:argument2 :s ;
                    swrl:propertyPredicate :has_Aunt ] ;
            rdf:rest () ] .

[] a swrl:Imp ;
    rdfs:label "Address_Rule" ;
    swrla:isRuleEnabled true ;
    rdfs:comment "" ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :address ;
                    swrl:argument2 :city ;
                    swrl:propertyPredicate :has_city ] ;
            rdf:rest () ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:IndividualPropertyAtom ;
                    swrl:argument1 :address ;
                    swrl:argument2 :city ;
                    swrl:propertyPredicate :is_contained_in ] ;
            rdf:rest () ] .

[] a owl:AllDisjointClasses ;
    owl:members ( :Bird :Fish :Mammal :Reptile ) .

[] a owl:AllDisjointClasses ;
    owl:members ( :Cat :Dog :Hedgehog :Human ) .

[] a owl:AllDisjointClasses ;
    owl:members ( :Corporation :Division :Region :Research_Institute :Sales_Office :University ) .

[] a owl:AllDifferent ;
    owl:distinctMembers ( :Albert_Einstein :Elsa_Einstein :Emmy_Noether :Kurt_Godel :Lise_Meitner :Michele_Besso ) .

