#!/usr/bin/env python3
"""
Generate simple SKOS definitions for classes in an OWL ontology.

For each class C (excluding owl:Thing and owl:Nothing), add ONE skos:definition:
  "A <C> is a kind of <Super1>. A <C> is a kind of <Super2>. ... Auto generated comment <YYYY-MM-DD>"

Rules:
- Enumerates ALL direct superclasses that appear explicitly as URI objects of rdfs:subClassOf.
- If no explicit superclass is found, falls back to owl:Thing.
- Skips a class iff it already has a skos:definition whose text contains "auto generated" (case-insensitive),
  so user-authored definitions are preserved and new classes still get generated text.

Usage:
  python add_simple_definitions.py path/to/ontology.ttl
"""

import sys
from pathlib import Path
from datetime import date

from rdflib import Graph, Namespace, RDF, RDFS, OWL, URIRef, Literal
from rdflib.namespace import SKOS, split_uri

# If you want to refresh/replace previously auto-generated definitions, set this to True.
OVERWRITE_EXISTING_AUTOGEN = False

def label_for(g: Graph, uri: URIRef) -> str:
    """Prefer rdfs:label; otherwise use local name. Replace underscores with spaces."""
    for _, _, lab in g.triples((uri, RDFS.label, None)):
        if isinstance(lab, Literal):
            return str(lab)
    try:
        _, local = split_uri(uri)
    except Exception:
        local = uri.split('#')[-1] if '#' in uri else uri.rsplit('/', 1)[-1]
    return local.replace('_', ' ')

def direct_superclasses(g: Graph, cls: URIRef):
    """
    Return all explicit superclasses that are URIRefs (exclude bnodes/restrictions and owl:Nothing).
    """
    supers = set()
    for _, _, sup in g.triples((cls, RDFS.subClassOf, None)):
        if isinstance(sup, URIRef) and sup != OWL.Nothing:
            supers.add(sup)
    return sorted(supers, key=lambda u: str(u))

def has_autogenerated_def(g: Graph, cls: URIRef) -> bool:
    """
    Return True if cls already has a skos:definition containing 'auto generated' (case-insensitive).
    """
    for _, _, val in g.triples((cls, SKOS.definition, None)):
        if isinstance(val, Literal) and "auto generated" in str(val).lower():
            return True
    return False

def remove_autogenerated_defs(g: Graph, cls: URIRef):
    """
    Remove any existing auto-generated skos:definition(s) for cls (used if OVERWRITE_EXISTING_AUTOGEN is True).
    """
    to_remove = []
    for _, p, val in g.triples((cls, SKOS.definition, None)):
        if isinstance(val, Literal) and "auto generated" in str(val).lower():
            to_remove.append((cls, p, val))
    for t in to_remove:
        g.remove(t)

def main(in_path: str):
    in_path = Path(in_path)
    if not in_path.exists():
        print(f"Input file not found: {in_path}", file=sys.stderr)
        sys.exit(1)

    g = Graph()
    g.parse(in_path.as_posix(), format="turtle")

    # Candidate classes: declared owl:Class or any subject of rdfs:subClassOf
    classes = set(s for s in g.subjects(RDF.type, OWL.Class) if isinstance(s, URIRef))
    classes.update(s for s, _, _ in g.triples((None, RDFS.subClassOf, None)) if isinstance(s, URIRef))

    # Exclude the top/bottom
    classes.discard(OWL.Thing)
    classes.discard(OWL.Nothing)

    today = date.today().isoformat()
    added = 0
    updated = 0

    for cls in sorted(classes, key=lambda u: str(u)):
        if not isinstance(cls, URIRef):
            continue

        was_update = False
        if has_autogenerated_def(g, cls):
            if not OVERWRITE_EXISTING_AUTOGEN:
                continue
            remove_autogenerated_defs(g, cls)
            was_update = True

        supers = direct_superclasses(g, cls) or [OWL.Thing]
        cls_label = label_for(g, cls)
        sentences = [f"A {cls_label} is a kind of {label_for(g, s)}." for s in supers]
        text = " ".join(sentences) + f" Auto generated comment {today}"
        g.add((cls, SKOS.definition, Literal(text, lang="en")))

        if was_update:
            updated += 1
        else:
            added += 1

    out_path = in_path.with_name(in_path.stem + "_with_documentation.ttl")
    g.serialize(destination=out_path.as_posix(), format="turtle")

    print(f"Added {added} new skos:definition annotation(s).")
    if OVERWRITE_EXISTING_AUTOGEN:
        print(f"Updated {updated} auto-generated definition(s).")
    print(f"Wrote: {out_path}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python add_simple_definitions.py path/to/ontology.ttl", file=sys.stderr)
        sys.exit(2)
    main(sys.argv[1])
